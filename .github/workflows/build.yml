name: Build container image

on:
    push:
    workflow_dispatch:

jobs:
  build-push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: linux/arm64,linux/amd64

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Prep
        id: prep
        run: |
          SHORT_SHA=$(echo ${{ github.sha }} | cut -c1-7)
          ASSIGNMENT_NUM=$(echo "${{ github.repository }}" | grep -o '[/-][0-9]\{3\}' | head -1 | tr -d '/-')
          GHCR_IMAGE_NAME="ghcr.io/${{ github.repository }}:${SHORT_SHA}"
          GHCR_IMAGE_LATEST="ghcr.io/${{ github.repository }}:latest"
          echo "SHORT_SHA=$SHORT_SHA" >> $GITHUB_ENV
          echo "ASSIGNMENT_NUM=$ASSIGNMENT_NUM" >> $GITHUB_ENV
          echo "GHCR_IMAGE_NAME=${GHCR_IMAGE_NAME}" >> $GITHUB_ENV
          echo "GHCR_IMAGE_NAME=${GHCR_IMAGE_NAME}" >> $GITHUB_OUTPUT
          echo "GHCR_IMAGE_LATEST=${GHCR_IMAGE_LATEST}" >> $GITHUB_ENV

      - name: Build and push
        id: build
        uses: docker/build-push-action@v6
        with:
          builder: ${{ steps.buildx.outputs.name }}
          context: .
          file: Dockerfile
          platforms: linux/arm64,linux/amd64
          tags: ${{ env.GHCR_IMAGE_NAME }},${{ env.GHCR_IMAGE_LATEST }}
          push: true  # push images
          # Pass GHCR creds to builder for pulling private base image
          secrets: |
            "GIT_AUTH_TOKEN=${{ secrets.GITHUB_TOKEN }}"
    outputs:
      GHCR_IMAGE_NAME: ${{ steps.prep.outputs.GHCR_IMAGE_NAME }}

  dispatch:
    runs-on: ubuntu-latest
    needs : build-push
    steps:
      - name: Checkout grader code
        uses: actions/checkout@v4

      - name: Install uv Package Manager
        uses: astral-sh/setup-uv@v5
        with:
          enable-cache: true
          version: "latest"

      - name: create venv
        run: uv venv my_env

      - name: Install requests
        run: |
          . my_env/bin/activate
          uv pip install requests

      - name: trigger repo dispatch
        env:
          IMAGE_URL : ${{ needs.build-push.outputs.GHCR_IMAGE_NAME }}
          TOKEN: ${{ secrets.BUILDER_PAT }}
          Q_REPO: ${{ vars.Q_REPO }}
        run: |
          . my_env/bin/activate
          python dispatch.py
